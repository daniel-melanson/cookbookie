// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// User
enum UserRole {
  USER
  ADMIN
}

model User {
  id String @id @default(cuid())

  // Time and date
  createdAt DateTime @default(now())

  // Basic
  firstName   String
  lastName    String
  email       String   @unique
  dateOfBirth DateTime
  image       String
  role        UserRole @default(USER)

  // Authentication
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]

  // Application
  savedRecipes Recipe[]
  unitSystem   UnitSystem

  // Tags
  allergens          Tag[] @relation("UserAllergens")
  diataryPreferences Tag[] @relation("UserDietaryPreferences")

  // Ingredient lists
  pantry       IngredientQuantity[] @relation("UserPantry")
  shoppingList IngredientQuantity[] @relation("UserShoppingList")
}

// Main objects
enum UnitSystem {
  US
  METRIC
}

model Unit {
  abbreviation String     @id
  name         String     @unique
  system       UnitSystem

  usUnit      IngredientQuantity[] @relation("QuantityUSUnits") @ignore
  mentricUnit IngredientQuantity[] @relation("QuantityMentricUnits") @ignore
}

model Ingredient {
  id String @id @default(cuid())

  // Time and date
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Basic
  name String @unique
  tags Tag[]

  IngredientQuantity IngredientQuantity[] @ignore
}

model Recipe {
  id String @id @default(cuid())

  // Time and date
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Basic
  name        String
  description String
  source      String @unique
  tags        Tag[]

  ingredients IngredientQuantity[]

  users User[] @ignore
}

model IngredientQuantity {
  id String @id @default(cuid())

  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  ingredientId String

  usQuantity         Float
  usUnit             Unit   @relation("QuantityUSUnits", fields: [usUnitAbbreviation], references: [abbreviation])
  usUnitAbbreviation String

  mentricQuantity         Float
  mentricUnit             Unit   @relation("QuantityMentricUnits", fields: [mentricUnitAbbreviation], references: [abbreviation])
  mentricUnitAbbreviation String

  Recipe   Recipe? @relation(fields: [recipeId], references: [id]) @ignore
  recipeId String? @ignore

  pantryUser   User?   @relation("UserPantry", fields: [pantryUserId], references: [id]) @ignore
  pantryUserId String? @ignore

  shoppingListUser   User?   @relation("UserShoppingList", fields: [shoppingListUserId], references: [id]) @ignore
  shoppingListUserId String? @ignore
}

// Tags
model TagKind {
  name String @id
  tags Tag[]
}

model Tag {
  id String @id

  name     String
  kind     TagKind @relation(fields: [kindName], references: [name])
  kindName String

  userAllergens          User[]       @relation("UserAllergens") @ignore
  userDietaryPreferences User[]       @relation("UserDietaryPreferences") @ignore
  ingredients            Ingredient[] @ignore
  recipes                Recipe[]     @ignore

  @@unique([name, kindName])
}

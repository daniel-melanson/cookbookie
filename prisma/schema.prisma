// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid()) @db.VarChar(32)
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @db.VarChar(32)
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// User
enum UserRole {
  USER
  ADMIN
}

model User {
  id                 String               @id @default(cuid()) @db.VarChar(32)
  // Time and date
  createdAt          DateTime             @default(now())
  // Basic
  firstName          String               @db.VarChar(64)
  lastName           String               @db.VarChar(64)
  email              String               @unique @db.VarChar(512)
  dateOfBirth        DateTime
  image              String               @db.VarChar(1024)
  role               UserRole             @default(USER)
  // Authentication
  emailVerified      DateTime?
  accounts           Account[]
  sessions           Session[]
  // Application
  savedRecipes       Recipe[]
  unitSystem         UnitSystem
  // Tags
  allergens          Tag[]                @relation("UserAllergens")
  diataryPreferences Tag[]                @relation("UserDietaryPreferences")
  // Ingredient lists
  pantry             IngredientQuantity[] @relation("UserPantry")
  shoppingList       IngredientQuantity[] @relation("UserShoppingList")
}

// Main objects
enum UnitSystem {
  US
  METRIC
}

model Unit {
  abbreviation String               @id @db.VarChar(8)
  name         String               @unique @db.VarChar(32)
  system       UnitSystem
  // Relations
  usUnit       IngredientQuantity[] @relation("QuantityUSUnits")
  metricUnit   IngredientQuantity[] @relation("QuantityMetricUnits")
}

model Ingredient {
  id                 String               @id @default(cuid()) @db.VarChar(32)
  // Time and date
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  // Basic
  name               String               @unique @db.VarChar(128)
  icon               String
  tags               Tag[]
  // Relations
  ingredientQuantity IngredientQuantity[]
}

enum RecipeDifficulty {
  EASY
  INTERMEDIATE
  HARD
}

model RecipeDuration {
  id       String @id @default(cuid()) @db.VarChar(32)
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId String @unique
  // Basic
  hours    Int    @db.SmallInt
  minutes  Int    @db.SmallInt
}

model Recipe {
  id          String               @id @default(cuid()) @db.VarChar(32)
  // Time and date
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  // Basic
  name        String               @db.VarChar(128)
  description String               @db.VarChar(2048)
  source      String               @unique @db.VarChar(1024)
  icon        String
  // Scraped information
  difficulty  RecipeDifficulty?
  duration    RecipeDuration?
  tags        Tag[]
  ingredients IngredientQuantity[]
  // Relations
  users       User[]
}

model IngredientQuantity {
  id                     String     @id @default(cuid()) @db.VarChar(32)
  // Basic
  ingredient             Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  ingredientId           String
  // Quantities
  usQuantity             Decimal    @db.Decimal(10, 2)
  usUnit                 Unit       @relation("QuantityUSUnits", fields: [usUnitAbbreviation], references: [abbreviation], onDelete: Cascade)
  usUnitAbbreviation     String
  metricQuantity         Decimal    @db.Decimal(10, 2)
  metricUnit             Unit       @relation("QuantityMetricUnits", fields: [metricUnitAbbreviation], references: [abbreviation], onDelete: Cascade)
  metricUnitAbbreviation String
  // Relations
  recipe                 Recipe?    @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId               String?
  pantryUser             User?      @relation("UserPantry", fields: [pantryUserId], references: [id], onDelete: Cascade)
  pantryUserId           String?
  shoppingListUser       User?      @relation("UserShoppingList", fields: [shoppingListUserId], references: [id], onDelete: Cascade)
  shoppingListUserId     String?

  @@unique([ingredientId, recipeId, pantryUserId, shoppingListUserId])
}

// Tags
model TagKind {
  name String @id @db.VarChar(64)
  tags Tag[]
}

model Tag {
  id                     String       @id @default(cuid()) @db.VarChar(32)
  // Basic
  name                   String       @db.VarChar(64)
  kind                   TagKind      @relation(fields: [kindName], references: [name], onDelete: Cascade)
  kindName               String
  // Relations
  userAllergens          User[]       @relation("UserAllergens")
  userDietaryPreferences User[]       @relation("UserDietaryPreferences")
  ingredients            Ingredient[]
  recipes                Recipe[]

  @@unique([kindName, name])
}
